Hi all! I have been working with Julia's ODE tools and I find them amazing! I have a quick, possibly dumb question, however: Let's say my ODE has a rate parameter that should vary in time as a deterministic function of an external, empirical time series (e.g. a temperature curve from weather data). I think this would require something like a subfunction that (a) knows the absolute value of time-after-start-point, and (b) looks up the relevant temperature on the (smoothed) temperature curve. Is this kind of thing possible? Cheers and thanks!

BridgingBot @GitterIRCbot Aug 22 12:31
[slack] <yingbo_ma> Would

function foo(u, p, t)
    ... p(t)
end
work?


BridgingBot @GitterIRCbot Aug 22 12:40
[slack] <chrisrackauckas> @nmatzke mix @yingbo_maâ€™s answer with https://github.com/PumasAI/DataInterpolations.jl



Pkg.add("DataInterpolations") # for LinearInterpolation
using DataInterpolations

# Interpolation of a single variable (n=1 evolving state) -- this works

u = rand(5)
t = 0:3
interp = LinearInterpolation(u,t);

interp.u
interp.t  # times corresponding to the u points

interp(2.5) # Gives the linear interpolation value at t=2.5



# Attempt to interpolate an ODE output with n=4 evolving states

# Setting up an example ODE output (i.e., the states at 4 timepoints)
ode_samples_t0 = [0.0 0.0 0.0 0.0]
ode_samples_t1 = [0.1 0.2 0.3 0.4]
ode_samples_t2 = [0.1 0.2 0.3 0.4]*2
ode_samples_t3 = [0.1 0.2 0.3 0.4]*3

ode_samples = [ode_samples_t0, ode_samples_t1, ode_samples_t2, ode_samples_t3]
u = ode_samples


# Setting up the interpolation seems to work
t = 0:3
interp = LinearInterpolation(u,t);

interp.u
interp.t  # times corresponding to the u points


# But, running it does not work:
interp(2.5)

# ERROR: MethodError: objects of type 
#   LinearInterpolation{Array{Array{Float64,2},1},Array{Int64,1},true,Array{Float64,2}} 
#   are not callable
# Use square brackets [] for indexing an Array.
