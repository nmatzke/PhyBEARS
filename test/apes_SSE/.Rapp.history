# Load the package (after installation, see above).#
library(optimx)   # optimx seems better than R's default optim()#
library(GenSA)    # GenSA seems better than optimx (but slower) on 5+ parameters, #
                  # seems to sometimes fail on simple problems (2-3 parameters)#
library(FD)       # for FD::maxent() (make sure this is up-to-date)#
library(snow)     # (if you want to use multicore functionality; some systems/R versions prefer library(parallel), try either)#
library(parallel)#
#
########################################################
# 2018-10-10 update: I have been putting the #
# updates on CRAN/GitHub#
# You should use:#
# rexpokit version 0.26.6 from CRAN#
# cladoRcpp version 0.15 from CRAN#
# BioGeoBEARS version 1.1 from GitHub, install with:#
# library(devtools)#
# devtools::install_github(repo="nmatzke/BioGeoBEARS")#
########################################################
library(rexpokit)#
library(cladoRcpp)#
library(BioGeoBEARS)#
#
########################################################
# CUT: The old instructions to source() online upgrade .R files have been deleted,#
#         all updates are now on the GitHub version of the package, version 1.1+#
########################################################
#
########################################################
# (This local-sourcing is mostly useful for Nick, while actively developing)#
# Local source()-ing method -- uses BioGeoBEARS sourceall() function #
# on a directory of .R files, so you don't have to type them out.#
# The directories here are on my machine, you would have to make a #
# directory, save the .R files there, and refer to them.#
##
# NOTE: it's best to source the "cladoRcpp.R" update first, to avoid warnings like this:#
###
## Note: possible error in 'rcpp_calc_anclikes_sp_COOweights_faster(Rcpp_leftprobs = tmpca_1, ': #
##         unused arguments (m = m, m_null_range = include_null_range, jts_matrix = jts_matrix) #
###
##
# TO USE: Delete or comment out the 'source("http://...")' commands above, and un-comment#
#              the below...#
#########################################################################
# Un-comment (and fix directory paths) to use:#
#library(BioGeoBEARS)#
#source("/drives/Dropbox/_njm/__packages/cladoRcpp_setup/cladoRcpp.R")#
#sourceall("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/")#
#calc_loglike_sp = compiler::cmpfun(calc_loglike_sp_prebyte)    # crucial to fix bug in uppass calculations#
#calc_independent_likelihoods_on_each_branch = compiler::cmpfun(calc_independent_likelihoods_on_each_branch_prebyte)#
#########################################################################
#
########################################################
# SETUP: YOUR WORKING DIRECTORY#
########################################################
# You will need to set your working directory to match your local system#
#
# Note these very handy functions!#
# Command "setwd(x)" sets your working directory#
# Command "getwd()" gets your working directory and tells you what it is.#
# Command "list.files()" lists the files in your working directory#
# To get help on any command, use "?".  E.g., "?list.files"#
#
# Set your working directory for output files#
# default here is your home directory ("~")#
# Change this as you like#
wd = "/GitHub/PhyBEARS.jl/test/apes_SSE/"#
setwd(wd)#
#
# Double-check your working directory with getwd()#
getwd()#
#
########################################################
# SETUP: Extension data directory#
########################################################
# When R packages contain extra files, they are stored in the "extdata" directory #
# inside the installed package.#
##
# BioGeoBEARS contains various example files and scripts in its extdata directory.#
# #
# Each computer operating system might install BioGeoBEARS in a different place, #
# depending on your OS and settings. #
# #
# However, you can find the extdata directory like this:#
extdata_dir = np(system.file("extdata", package="BioGeoBEARS"))#
extdata_dir#
list.files(extdata_dir)#
#
# "system.file" looks in the directory of a specified package (in this case BioGeoBEARS)#
# The function "np" is just a shortcut for normalizePath(), which converts the #
# path to the format appropriate for your system (e.g., Mac/Linux use "/", but #
# Windows uses "\\", if memory serves).#
#
# Even when using your own data files, you should KEEP these commands in your #
# script, since the plot_BioGeoBEARS_results function needs a script from the #
# extdata directory to calculate the positions of "corners" on the plot. This cannot#
# be made into a straight up BioGeoBEARS function because it uses C routines #
# from the package APE which do not pass R CMD check for some reason.#
#
########################################################
# SETUP: YOUR TREE FILE AND GEOGRAPHY FILE#
########################################################
# Example files are given below. To run your own data,#
# make the below lines point to your own files, e.g.#
# trfn = "/mydata/frogs/frogBGB/tree.newick"#
# geogfn = "/mydata/frogs/frogBGB/geog.data"#
#
########################################################
# Phylogeny file#
# Notes: #
# 1. Must be binary/bifurcating: no polytomies#
# 2. No negative branchlengths (e.g. BEAST MCC consensus trees sometimes have negative branchlengths)#
# 3. Be careful of very short branches, as BioGeoBEARS will interpret ultrashort branches as direct ancestors#
# 4. You can use non-ultrametric trees, but BioGeoBEARS will interpret any tips significantly below the #
#    top of the tree as fossils!  This is only a good idea if you actually do have fossils in your tree,#
#    as in e.g. Wood, Matzke et al. (2013), Systematic Biology.#
# 5. The default settings of BioGeoBEARS make sense for trees where the branchlengths are in units of #
#    millions of years, and the tree is 1-1000 units tall. If you have a tree with a total height of#
#    e.g. 0.00001, you will need to adjust e.g. the max values of d and e, or (simpler) multiply all#
#    your branchlengths to get them into reasonable units.#
# 6. DON'T USE SPACES IN SPECIES NAMES, USE E.G. "_"#
########################################################
# This is the example Newick file for Hawaiian apes#
# (from Ree & Smith 2008)#
# "trfn" = "tree file name"#
trfn = "tree.newick"#
#
# Look at the raw Newick file:#
moref(trfn)#
#
# Look at your phylogeny (plots to a PDF, which avoids issues with multiple graphics in same window):#
pdffn = "tree.pdf"#
pdf(file=pdffn, width=9, height=12)#
#
tr = read.tree(trfn)#
tr#
plot(tr)#
title("Example apes phylogeny")#
axisPhylo() # plots timescale#
#
dev.off()#
cmdstr = paste0("open ", pdffn)#
system(cmdstr)#
#
########################################################
# Geography file#
# Notes:#
# 1. This is a PHYLIP-formatted file. This means that in the #
#    first line, #
#    - the 1st number equals the number of rows (species)#
#    - the 2nd number equals the number of columns (number of areas)#
#    - after a tab, put the areas in parentheses, with spaces: (A B C D)#
##
# 1.5. Example first line:#
#    10    4    (A B C D)#
# #
# 2. The second line, and subsequent lines:#
#    speciesA    0110#
#    speciesB    0111#
#    speciesC    0001#
#         ...#
# #
# 2.5a. This means a TAB between the species name and the area 0/1s#
# 2.5b. This also means NO SPACE AND NO TAB between the area 0/1s.#
# #
# 3. See example files at:#
#    http://phylo.wikidot.com/biogeobears#files#
# #
# 4. Make you understand what a PLAIN-TEXT EDITOR is:#
#    http://phylo.wikidot.com/biogeobears#texteditors#
##
# 3. The PHYLIP format is the same format used for C++ LAGRANGE geography files.#
##
# 4. All names in the geography file must match names in the phylogeny file.#
##
# 5. DON'T USE SPACES IN SPECIES NAMES, USE E.G. "_"#
##
# 6. Operational taxonomic units (OTUs) should ideally be phylogenetic lineages, #
#    i.e. genetically isolated populations.  These may or may not be identical #
#    with species.  You would NOT want to just use specimens, as each specimen #
#    automatically can only live in 1 area, which will typically favor DEC+J #
#    models.  This is fine if the species/lineages really do live in single areas,#
#    but you wouldn't want to assume this without thinking about it at least. #
#    In summary, you should collapse multiple specimens into species/lineages if #
#    data indicates they are the same genetic population.#
#######################################################
#
# This is the example geography file for Hawaiian apes#
# (from Ree & Smith 2008)#
geogfn = "geog.data"#
#
# Look at the raw geography text file:#
moref(geogfn)#
#
# Look at your geographic range data:#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=geogfn)#
tipranges#
#
# Maximum range size observed:#
max(rowSums(dfnums_to_numeric(tipranges@df)))#
#
# Set the maximum number of areas any species may occupy; this cannot be larger #
# than the number of areas you set up, but it can be smaller.#
max_range_size = 2#
#
#####################################################
#####################################################
# KEY HINT: The number of states (= number of different possible geographic ranges)#
# depends on (a) the number of areas and (b) max_range_size.#
# If you have more than about 500-600 states, the calculations will get REALLY slow,#
# since the program has to exponentiate a matrix of e.g. 600x600.  Often the computer#
# will just sit there and crunch, and never get through the calculation of the first#
# likelihood.#
# #
# (this is also what is usually happening when LAGRANGE hangs: you have too many states!)#
##
# To check the number of states for a given number of ranges, try:#
numstates_from_numareas(numareas=4, maxareas=4, include_null_range=TRUE)#
numstates_from_numareas(numareas=4, maxareas=4, include_null_range=FALSE)#
numstates_from_numareas(numareas=4, maxareas=3, include_null_range=TRUE)#
numstates_from_numareas(numareas=4, maxareas=2, include_null_range=TRUE)#
#
# Large numbers of areas have problems:#
numstates_from_numareas(numareas=10, maxareas=10, include_null_range=TRUE)#
#
# ...unless you limit the max_range_size:#
numstates_from_numareas(numareas=10, maxareas=2, include_null_range=TRUE)#
#####################################################
#####################################################
#
########################################################
########################################################
# DEC AND DEC+J ANALYSIS#
########################################################
########################################################
# NOTE: The BioGeoBEARS "DEC" model is identical with #
# the Lagrange DEC model, and should return identical#
# ML estimates of parameters, and the same #
# log-likelihoods, for the same datasets.#
##
# Ancestral state probabilities at nodes will be slightly #
# different, since BioGeoBEARS is reporting the #
# ancestral state probabilities under the global ML#
# model, and Lagrange is reporting ancestral state#
# probabilities after re-optimizing the likelihood#
# after fixing the state at each node. These will #
# be similar, but not identical. See Matzke (2014),#
# Systematic Biology, for discussion.#
##
# Also see Matzke (2014) for presentation of the #
# DEC+J model.#
########################################################
########################################################
#
########################################################
########################################################
#
########################################################
# Run DEC#
########################################################
#
# Intitialize a default model (DEC model)#
BioGeoBEARS_run_object = define_BioGeoBEARS_run()#
#
# Give BioGeoBEARS the location of the phylogeny Newick file#
BioGeoBEARS_run_object$trfn = trfn#
#
# Give BioGeoBEARS the location of the geography text file#
BioGeoBEARS_run_object$geogfn = geogfn#
#
# Input the maximum range size#
BioGeoBEARS_run_object$max_range_size = max_range_size#
#
BioGeoBEARS_run_object$min_branchlength = 0.000001    # Min to treat tip as a direct ancestor (no speciation event)#
BioGeoBEARS_run_object$include_null_range = TRUE    # set to FALSE for e.g. DEC* model, DEC*+J, etc.#
# (For DEC* and other "*" models, please cite: Massana, Kathryn A.; Beaulieu, #
#  Jeremy M.; Matzke, Nicholas J.; O’Meara, Brian C. (2015). Non-null Effects of #
#  the Null Range in Biogeographic Models: Exploring Parameter Estimation in the #
#  DEC Model. bioRxiv,  http://biorxiv.org/content/early/2015/09/16/026914 )#
# Also: search script on "include_null_range" for other places to change#
#
# Set up a time-stratified analysis:#
# 1. Here, un-comment ONLY the files you want to use.#
# 2. Also un-comment "BioGeoBEARS_run_object = section_the_tree(...", below.#
# 3. For example files see (a) extdata_dir, #
#  or (b) http://phylo.wikidot.com/biogeobears#files#
#  and BioGeoBEARS Google Group posts for further hints)#
##
# Uncomment files you wish to use in time-stratified analyses:#
#BioGeoBEARS_run_object$timesfn = "timeperiods.txt"#
#BioGeoBEARS_run_object$dispersal_multipliers_fn = "manual_dispersal_multipliers.txt"#
#BioGeoBEARS_run_object$areas_allowed_fn = "areas_allowed.txt"#
#BioGeoBEARS_run_object$areas_adjacency_fn = "areas_adjacency.txt"#
#BioGeoBEARS_run_object$distsfn = "distances_matrix.txt"#
# See notes on the distances model on PhyloWiki's BioGeoBEARS updates page.#
#
# Speed options and multicore processing if desired#
BioGeoBEARS_run_object$on_NaN_error = -1e50    # returns very low lnL if parameters produce NaN error (underflow check)#
BioGeoBEARS_run_object$speedup = TRUE          # shorcuts to speed ML search; use FALSE if worried (e.g. >3 params)#
BioGeoBEARS_run_object$use_optimx = TRUE    # if FALSE, use optim() instead of optimx();#
# if "GenSA", use Generalized Simulated Annealing, which seems better on high-dimensional#
# problems (5+ parameters), but seems to sometimes fail to optimize on simple problems#
BioGeoBEARS_run_object$num_cores_to_use = 1#
# (use more cores to speed it up; this requires#
# library(parallel) and/or library(snow). The package "parallel" #
# is now default on Macs in R 3.0+, but apparently still #
# has to be typed on some Windows machines. Note: apparently #
# parallel works on Mac command-line R, but not R.app.#
# BioGeoBEARS checks for this and resets to 1#
# core with R.app)#
#
# Sparse matrix exponentiation is an option for huge numbers of ranges/states (600+)#
# I have experimented with sparse matrix exponentiation in EXPOKIT/rexpokit,#
# but the results are imprecise and so I haven't explored it further.#
# In a Bayesian analysis, it might work OK, but the ML point estimates are#
# not identical.#
# Also, I have not implemented all functions to work with force_sparse=TRUE.#
# Volunteers are welcome to work on it!!#
BioGeoBEARS_run_object$force_sparse = FALSE    # force_sparse=TRUE causes pathology & isn't much faster at this scale#
#
# This function loads the dispersal multiplier matrix etc. from the text files into the model object. Required for these to work!#
# (It also runs some checks on these inputs for certain errors.)#
BioGeoBEARS_run_object = readfiles_BioGeoBEARS_run(BioGeoBEARS_run_object)#
#
# Divide the tree up by timeperiods/strata (uncomment this for stratified analysis)#
#BioGeoBEARS_run_object = section_the_tree(inputs=BioGeoBEARS_run_object, make_master_table=TRUE, plot_pieces=FALSE)#
# The stratified tree is described in this table:#
#BioGeoBEARS_run_object$master_table#
#
# Good default settings to get ancestral states#
BioGeoBEARS_run_object$return_condlikes_table = TRUE#
BioGeoBEARS_run_object$calc_TTL_loglike_from_condlikes_table = TRUE#
BioGeoBEARS_run_object$calc_ancprobs = TRUE    # get ancestral states from optim run#
#
# Set up DEC model#
# (nothing to do; defaults)#
#
# Look at the BioGeoBEARS_run_object; it's just a list of settings etc.#
BioGeoBEARS_run_object#
#
# This contains the model object#
BioGeoBEARS_run_object$BioGeoBEARS_model_object#
#
# This table contains the parameters of the model #
BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table#
#
# Run this to check inputs. Read the error messages if you get them!#
check_BioGeoBEARS_run(BioGeoBEARS_run_object)#
#
# For a slow analysis, run once, then set runslow=FALSE to just #
# load the saved result.#
runslow = TRUE#
resfn = "apes_DEC_M0_unconstrained_v1.Rdata"#
if (runslow)#
    {#
    res = bears_optim_run(BioGeoBEARS_run_object)#
    res    #
#
    save(res, file=resfn)#
    resDEC = res#
    } else {#
    # Loads to "res"#
    load(resfn)#
    resDEC = res#
    }#
########################################################
# For comparison to PhyBEARS#
########################################################
res = resDEC#
names(res)
res$relative_probs_of_each_state_at_branch_bottom_below_node_UPPASS
res$relative_probs_of_each_state_at_branch_top_AT_node_UPPASS#
#
res$relative_probs_of_each_state_at_branch_bottom_below_node_UPPASS#
#
res$ML_marginal_prob_each_state_at_branch_top_AT_node
rowSums(res$ML_marginal_prob_each_state_at_branch_top_AT_node)
rowSums(res$relative_probs_of_each_state_at_branch_bottom_below_node_UPPASS)
names(res)
res$relative_probs_of_each_state_at_branch_top_AT_node_UPPASS#
res$ML_marginal_prob_each_state_at_branch_top_AT_node#
res$relative_probs_of_each_state_at_branch_bottom_below_node_UPPASS#
#
res$ML_marginal_prob_each_state_at_branch_top_AT_node
resDEC = structure(list(computed_likelihoods_at_each_node = c(1, 1, 1, #
1, 0.36502788215878, 0.227783575654047, 0.136167332530107), relative_probs_of_each_state_at_branch_top_AT_node_DOWNPASS = structure(c(0, #
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 6.42693382782259e-14, 7.46190547654875e-14, #
3.13642570191625e-13, 1, 0, 1, 1, 0.757828232249181, 0.344749222130095, #
3.13642570191625e-13, 0, 0, 0, 0, 0.242171767750754, 0.65525077786983, #
0.999999999999373), dim = c(7L, 4L)), condlikes_of_each_state = structure(c(0, #
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2.3460100439447e-14, 1.69969951064079e-14, #
4.27078721508805e-14, 1, 0, 1, 1, 0.276628434658051, 0.0785282105207443, #
4.27078721508805e-14, 0, 0, 0, 0, 0.0883994475007057, 0.149255365133286, #
0.136167332530022), dim = c(7L, 4L)), relative_probs_of_each_state_at_branch_bottom_below_node_DOWNPASS = structure(c(0, #
0, 0, 0, NA, 0, 0, 5.22737626427221e-14, 0.999999999998895, 2.16444459101218e-13, #
5.04411011774348e-13, NA, 0.0576312779227834, 0.0806194459381856, #
0.999999999998895, 5.22737626427221e-14, 0.999999999997567, 0.999999999995991, #
NA, 0.342775485350427, 0.0806194459381856, 1.05227375864476e-12, #
1.05227375864476e-12, 2.21644445110031e-12, 3.5044109997644e-12, #
NA, 0.599593236726789, 0.838761108123629), dim = c(7L, 4L)), #
    relative_probs_of_each_state_at_branch_bottom_below_node_UPPASS = structure(c(0, #
    0, 0, 0, NA, 0, 0, 0.477617887308721, 0.0266167777965505, #
    0.308323346796742, 0.292600516988572, NA, 0.125000000000644, #
    0.046615618818038, 0.261191056346013, 0.946766444406928, #
    0.649573122214116, 0.616448394398207, NA, 0.749999999999466, #
    0.90676876236405, 0.261191056345266, 0.0266167777965214, #
    0.0421035309891421, 0.090951088613221, NA, 0.12499999999989, #
    0.0466156188179121), dim = c(7L, 4L)), relative_probs_of_each_state_at_branch_top_AT_node_UPPASS = structure(c(7.02704868858637e-13, #
    9.25815984473407e-13, 1.73460095194895e-12, 2.35254814927231e-12, #
    0.25, 8.32240548158005e-13, 9.06794445714384e-13, 0.431710549603533, #
    0.0240584452060588, 0.251901392427722, 0.216078384422621, #
    0.25, 0.112985338561828, 0.0421350517952136, 0.236086079443338, #
    0.855765818076806, 0.530703807120855, 0.455232186573681, #
    0.25, 0.67791203136619, 0.819612604898638, 0.332203370953129, #
    0.120175736717135, 0.217394800451423, 0.328689429003699, #
    0.25, 0.209102630071982, 0.138252343306148), dim = c(7L, #
    4L)), ML_marginal_prob_each_state_at_branch_bottom_below_node = structure(c(0, #
    0, 0, 0, NA, 0, 0, 9.55885872371469e-14, 0.999999999997088, #
    1.02736516865682e-13, 2.3942137600093e-13, NA, 0.0212357703981079, #
    0.0324086154040224, 0.999999999998852, 1.85939277741373e-12, #
    0.999999999999754, 0.999999999999244, NA, 0.757828224601766, #
    0.630413600097194, 1.05227375864171e-12, 1.05227375864171e-12, #
    1.43663791560109e-13, 5.17042461743951e-13, NA, 0.220936005000126, #
    0.337177784498784), dim = c(7L, 4L)), ML_marginal_prob_each_state_at_branch_top_AT_node = structure(c(0, #
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 6.42693382782259e-14, 2.27415872607374e-14, #
    9.55885855108166e-14, 1, 0, 1, 1, 0.757828232249181, 0.630413602214152, #
    1.85939274383416e-12, 0, 0, 0, 0, 0.242171767750754, 0.369586397785825, #
    0.999999999998045), dim = c(7L, 4L)), relative_probs_of_each_state_at_bottom_of_root_branch = c(0, #
    6.42693382782259e-14, 0.757828232249181, 0.242171767750754#
    ), total_loglikelihood = -4.48101163256014, inputs = list(#
        geogfn = "geog.data", trfn = "tree.newick", abbr = "default", #
        description = "defaults", BioGeoBEARS_model_object = new("BioGeoBEARS_model", #
            params_table = structure(list(type = c("free", "free", #
            "fixed", "fixed", "fixed", "fixed", "fixed", "fixed", #
            "fixed", "3-j", "ysv*2/3", "ysv*1/3", "ysv*1/3", #
            "ysv*1/3", "fixed", "mx01", "mx01", "mx01", "mx01", #
            "fixed", "fixed", "fixed", "fixed"), init = c(0.101055674351941, #
            1e-12, 0, 1, 0, 0, 1, 0, 0, 2.99999, 1.99999, 1, #
            1, 1, 1e-04, 1e-04, 1e-04, 1e-04, 1e-04, 0.5, 0.1, #
            1, 0), min = c(1e-12, 1e-12, 1e-12, 1e-12, -2.5, #
            -10, -10, -10, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, #
            1e-05, 1e-04, 1e-04, 1e-04, 1e-04, 1e-04, 1e-04, #
            0.005, 0.005, 0.005), max = c(4.999999999999, 4.999999999999, #
            4.999999999999, 0.999999999999, 2.5, 10, 10, 10, #
            2.99999, 3, 2, 1, 1, 1, 0.9999, 0.9999, 0.9999, 0.9999, #
            0.9999, 0.9999, 0.995, 0.995, 0.995), est = c(0.101055674351941, #
            1e-12, 0, 1, 0, 0, 1, 0, 0, 3, 2, 1, 1, 1, 1e-04, #
            1e-04, 1e-04, 1e-04, 1e-04, 0.5, 0.1, 1, 0), note = c("works", #
            "works", "works", "non-stratified only", "works", #
            "works", "works", "works", "works", "works", "works", #
            "works", "works", "works", "works", "works", "works", #
            "works", "works", "no", "yes", "yes", "yes"), desc = c("anagenesis: rate of 'dispersal' (range expansion)", #
            "anagenesis: rate of 'extinction' (range contraction)", #
            "anagenesis: rate of range-switching (i.e. for a standard char.)", #
            "anagenesis: exponent on branch lengths", "exponent on distance (modifies d, j, a)", #
            "exponent on environmental distance (modifies d, j, a)", #
            "exponent on manual dispersal multipliers (modifies d, j, a)", #
            "anagenesis: exponent on extinction risk with area (modifies e)", #
            "cladogenesis: relative per-event weight of jump dispersal", #
            "cladogenesis: y+s+v", "cladogenesis: y+s", "cladogenesis: relative per-event weight of sympatry (range-copying)", #
            "cladogenesis: relative per-event weight of subset speciation", #
            "cladogenesis: relative per-event weight of vicariant speciation", #
            "cladogenesis: controls range size of smaller daughter", #
            "cladogenesis: controls range size of smaller daughter", #
            "cladogenesis: controls range size of smaller daughter", #
            "cladogenesis: controls range size of smaller daughter", #
            "cladogenesis: controls range size of smaller daughter", #
            "root: controls range size probabilities of root", #
            "mean frequency of truly sampling OTU of interest", #
            "detection probability per true sample of OTU of interest", #
            "false detection of OTU probability per true taphonomic control sample"#
            )), row.names = c("d", "e", "a", "b", "x", "n", "w", #
            "u", "j", "ysv", "ys", "y", "s", "v", "mx01", "mx01j", #
            "mx01y", "mx01s", "mx01v", "mx01r", "mf", "dp", "fdp"#
            ), class = "data.frame")), timesfn = NA, distsfn = NA, #
        dispersal_multipliers_fn = NA, area_of_areas_fn = NA, #
        areas_allowed_fn = NA, areas_adjacency_fn = NA, detects_fn = NA, #
        controls_fn = NA, max_range_size = 2, force_sparse = FALSE, #
        use_detection_model = FALSE, print_optim = TRUE, printlevel = 0, #
        on_NaN_error = -1e+50, wd = "/GitHub/PhyBEARS.jl/test/apes_SSE", #
        num_cores_to_use = 1, cluster_already_open = FALSE, use_optimx = TRUE, #
        rescale_params = FALSE, return_condlikes_table = TRUE, #
        calc_TTL_loglike_from_condlikes_table = TRUE, calc_ancprobs = TRUE, #
        speedup = TRUE, include_null_range = TRUE, useAmbiguities = FALSE, #
        min_branchlength = 1e-06, allow_null_tips = FALSE, all_geog_states_list_usually_inferred_from_areas_maxareas = list(#
            NA, 0L, 1L, 0:1)), outputs = new("BioGeoBEARS_model", #
        params_table = structure(list(type = c("free", "free", #
        "fixed", "fixed", "fixed", "fixed", "fixed", "fixed", #
        "fixed", "3-j", "ysv*2/3", "ysv*1/3", "ysv*1/3", "ysv*1/3", #
        "fixed", "mx01", "mx01", "mx01", "mx01", "fixed", "fixed", #
        "fixed", "fixed"), init = c(0.101055674351941, 1e-12, #
        0, 1, 0, 0, 1, 0, 0, 2.99999, 1.99999, 1, 1, 1, 1e-04, #
        1e-04, 1e-04, 1e-04, 1e-04, 0.5, 0.1, 1, 0), min = c(1e-12, #
        1e-12, 1e-12, 1e-12, -2.5, -10, -10, -10, 1e-05, 1e-05, #
        1e-05, 1e-05, 1e-05, 1e-05, 1e-04, 1e-04, 1e-04, 1e-04, #
        1e-04, 1e-04, 0.005, 0.005, 0.005), max = c(4.999999999999, #
        4.999999999999, 4.999999999999, 0.999999999999, 2.5, #
        10, 10, 10, 2.99999, 3, 2, 1, 1, 1, 0.9999, 0.9999, 0.9999, #
        0.9999, 0.9999, 0.9999, 0.995, 0.995, 0.995), est = c(0.101055674351941, #
        1e-12, 0, 1, 0, 0, 1, 0, 0, 3, 2, 1, 1, 1, 1e-04, 1e-04, #
        1e-04, 1e-04, 1e-04, 0.5, 0.1, 1, 0), note = c("works", #
        "works", "works", "non-stratified only", "works", "works", #
        "works", "works", "works", "works", "works", "works", #
        "works", "works", "works", "works", "works", "works", #
        "works", "no", "yes", "yes", "yes"), desc = c("anagenesis: rate of 'dispersal' (range expansion)", #
        "anagenesis: rate of 'extinction' (range contraction)", #
        "anagenesis: rate of range-switching (i.e. for a standard char.)", #
        "anagenesis: exponent on branch lengths", "exponent on distance (modifies d, j, a)", #
        "exponent on environmental distance (modifies d, j, a)", #
        "exponent on manual dispersal multipliers (modifies d, j, a)", #
        "anagenesis: exponent on extinction risk with area (modifies e)", #
        "cladogenesis: relative per-event weight of jump dispersal", #
        "cladogenesis: y+s+v", "cladogenesis: y+s", "cladogenesis: relative per-event weight of sympatry (range-copying)", #
        "cladogenesis: relative per-event weight of subset speciation", #
        "cladogenesis: relative per-event weight of vicariant speciation", #
        "cladogenesis: controls range size of smaller daughter", #
        "cladogenesis: controls range size of smaller daughter", #
        "cladogenesis: controls range size of smaller daughter", #
        "cladogenesis: controls range size of smaller daughter", #
        "cladogenesis: controls range size of smaller daughter", #
        "root: controls range size probabilities of root", "mean frequency of truly sampling OTU of interest", #
        "detection probability per true sample of OTU of interest", #
        "false detection of OTU probability per true taphonomic control sample"#
        )), row.names = c("d", "e", "a", "b", "x", "n", "w", #
        "u", "j", "ysv", "ys", "y", "s", "v", "mx01", "mx01j", #
        "mx01y", "mx01s", "mx01v", "mx01r", "mf", "dp", "fdp"#
        ), class = "data.frame")), optim_result = structure(list(#
        p1 = 0.101055674351941, p2 = 1e-12, value = -4.48101163256014, #
        fevals = 39, gevals = NA_real_, niter = NA_real_, convcode = 0, #
        kkt1 = FALSE, kkt2 = TRUE, xtime = 0.354), row.names = "bobyqa", class = c("optimx", #
    "data.frame"), details = structure(list("bobyqa", c(0.0313402484276759, #
    0), structure(c(-65.7496196774338, 0, 0, 0), dim = c(2L, #
    2L)), c(-65.7496196774338, 0), "none"), dim = c(1L, 5L), dimnames = list(#
        "bobyqa", c("method", "ngatend", "nhatend", "hev", "message"#
        ))), maximize = TRUE, npar = 2L, follow.on = FALSE)), class = "calc_loglike_sp_results")#
#
trfn = "/GitHub/PhyBEARS.jl/test/apes_SSE/tree.newick"#
moref(trfn)#
#
tree_string = "(((chimp:1,human:1):1,gorilla:2):1,orang:3);"#
tr = read.tree(file="", text=tree_string)#
trtable = prt(tr, printflag=FALSE)#
#
numstates = 4#
tmpres = get_Qmat_COOmat_from_res(resDEC, numstates=numstates, include_null_range=TRUE, max_range_size=NULL, timeperiod_i=1)#
#
probs_ancstate = rep(0.25, numstates)#
COO_weights_columnar = tmpres$COO_weights_columnar#
include_null_range = TRUE#
left_branch_downpass_likes = rep(1, numstates)#
right_branch_downpass_likes = rep(1, numstates)#
Rsp_rowsums = tmpres$Rsp_rowsums#
clado_table = cbind(tmpres$COO_weights_columnar[[1]]+1, tmpres$COO_weights_columnar[[2]]+1, tmpres$COO_weights_columnar[[3]]+1, tmpres$COO_weights_columnar[[4]])#
#
probs = rep(0, nrow(clado_table))#
for (i in 1:length(probs))#
	probs[i] = clado_table[i,4] / Rsp_rowsums[clado_table[i,1]]#
end#
clado_table = cbind(clado_table, probs)#
clado_table_df = adf2(clado_table)#
names(clado_table_df) = c("i", "j", "k", "wt", "prob")#
clado_table_df#
#
# equal ancstate probs#
calc_uppass_probs_new2(probs_ancstate, COO_weights_columnar, numstates, include_null_range = include_null_range, #
    left_branch_downpass_likes = NULL, right_branch_downpass_likes = NULL, #
    Rsp_rowsums = NULL)#
#
# $condprob_each_split_scenario_df2#
#            [,1]#
# [1,] 0.33333333#
# [2,] 0.33333333#
# [3,] 0.05555556#
# [4,] 0.05555556#
# [5,] 0.05555556#
# [6,] 0.05555556#
# [7,] 0.05555556#
# [8,] 0.05555556#
# #
# $relprobs_just_after_speciation_UPPASS_Left#
# [1] 0.0000000 0.4444444 0.4444444 0.1111111#
# #
# $relprobs_just_after_speciation_UPPASS_Right#
# [1] 0.0000000 0.4444444 0.4444444 0.1111111#
# Ancestral node states#
#
# Ancestral root node number: 5#
# Left branch node number: 6  (internal)#
# Right branch node number: 4 (a tip, orangutan)#
#
numstates = ncol(resDEC$ML_marginal_prob_each_state_at_branch_top_AT_node)#
rootnode = 5#
#probs_ancstate = resDEC$ML_marginal_prob_each_state_at_branch_top_AT_node[5,]#
probs_ancstate = rep(1/numstates, numstates)#
calc_uppass_probs_new2(probs_ancstate, COO_weights_columnar, numstates, include_null_range = include_null_range, #
    left_branch_downpass_likes = NULL, right_branch_downpass_likes = NULL, #
    Rsp_rowsums = NULL)#
#
# $condprob_each_split_scenario_df2#
#              [,1]#
# [1,] 6.426934e-14#
# [2,] 7.578282e-01#
# [3,] 4.036196e-02#
# [4,] 4.036196e-02#
# [5,] 4.036196e-02#
# [6,] 4.036196e-02#
# [7,] 4.036196e-02#
# [8,] 4.036196e-02#
# #
# $relprobs_just_after_speciation_UPPASS_Left#
# [1] 0.00000000 0.08072392 0.83855215 0.08072392#
# #
# $relprobs_just_after_speciation_UPPASS_Right#
# [1] 0.00000000 0.08072392 0.83855215 0.08072392#
#
# Calculate uppass probabilities for RIGHT branch, the corner below node 4 (sister branch is node 6)#
left_branch_downpass_likes = resDEC$relative_probs_of_each_state_at_branch_bottom_below_node_DOWNPASS[6,]#
right_branch_downpass_likes = rep(1.0, numstates)#
tmpres = calc_uppass_probs_new2(probs_ancstate, COO_weights_columnar, numstates, include_null_range = include_null_range, #
    left_branch_downpass_likes=left_branch_downpass_likes, right_branch_downpass_likes=right_branch_downpass_likes, #
    Rsp_rowsums = NULL)#
#
tmpres$relprobs_just_after_speciation_UPPASS_Right#
#
calc = tmpres$relprobs_just_after_speciation_UPPASS_Right * resDEC$relative_probs_of_each_state_at_branch_bottom_below_node_DOWNPASS[4,]#
calc / sum(calc)#
#
resDEC$relative_probs_of_each_state_at_branch_bottom_below_node_UPPASS[4,]#
resDEC$ML_marginal_prob_each_state_at_branch_bottom_below_node[4,]#
#
# > tmpres$relprobs_just_after_speciation_UPPASS_Right#
# [1] 0.00000000 0.29260052 0.61644839 0.09095109#
# > #
# > calc = tmpres$relprobs_just_after_speciation_UPPASS_Right * resDEC$relative_probs_of_each_state_at_branch_bottom_below_node_DOWNPASS[4,]#
# > calc / sum(calc)#
# [1] 0.000000e+00 2.394214e-13 1.000000e+00 5.170425e-13#
# > #
# > resDEC$relative_probs_of_each_state_at_branch_bottom_below_node_UPPASS[4,]#
# [1] 0.00000000 0.29260052 0.61644839 0.09095109#
# > resDEC$ML_marginal_prob_each_state_at_branch_bottom_below_node[4,]#
# [1] 0.000000e+00 2.394214e-13 1.000000e+00 5.170425e-13#
# Calculate uppass probabilities for LEFT branch, the corner below node 6 (sister branch is node 4)#
left_branch_downpass_likes = rep(1.0, numstates)#
right_branch_downpass_likes = resDEC$relative_probs_of_each_state_at_branch_bottom_below_node_DOWNPASS[4,]#
tmpres = calc_uppass_probs_new2(probs_ancstate, COO_weights_columnar, numstates, include_null_range = include_null_range, #
    left_branch_downpass_likes=left_branch_downpass_likes, right_branch_downpass_likes=right_branch_downpass_likes, #
    Rsp_rowsums = NULL)#
#
tmpres$relprobs_just_after_speciation_UPPASS_Left#
#
calc = tmpres$relprobs_just_after_speciation_UPPASS_Left * resDEC$relative_probs_of_each_state_at_branch_bottom_below_node_DOWNPASS[6,]#
calc / sum(calc)#
#
resDEC$relative_probs_of_each_state_at_branch_bottom_below_node_UPPASS[6,]#
resDEC$ML_marginal_prob_each_state_at_branch_bottom_below_node[6,]
clado_table = cbind(tmpres$COO_weights_columnar[[1]]+1, tmpres$COO_weights_columnar[[2]]+1, tmpres$COO_weights_columnar[[3]]+1, tmpres$COO_weights_columnar[[4]])#
#
probs = rep(0, nrow(clado_table))#
for (i in 1:length(probs))#
	probs[i] = clado_table[i,4] / Rsp_rowsums[clado_table[i,1]]#
end#
clado_table = cbind(clado_table, probs)#
clado_table_df = adf2(clado_table)#
names(clado_table_df) = c("i", "j", "k", "wt", "prob")#
clado_table_df
trfn = "/GitHub/PhyBEARS.jl/test/apes_SSE/tree.newick"#
moref(trfn)#
#
tree_string = "(((chimp:1,human:1):1,gorilla:2):1,orang:3);"#
tr = read.tree(file="", text=tree_string)#
trtable = prt(tr, printflag=FALSE)#
#
numstates = 4#
tmpres = get_Qmat_COOmat_from_res(resDEC, numstates=numstates, include_null_range=TRUE, max_range_size=NULL, timeperiod_i=1)#
#
probs_ancstate = rep(0.25, numstates)#
COO_weights_columnar = tmpres$COO_weights_columnar#
include_null_range = TRUE#
left_branch_downpass_likes = rep(1, numstates)#
right_branch_downpass_likes = rep(1, numstates)#
Rsp_rowsums = tmpres$Rsp_rowsums#
clado_table = cbind(tmpres$COO_weights_columnar[[1]]+1, tmpres$COO_weights_columnar[[2]]+1, tmpres$COO_weights_columnar[[3]]+1, tmpres$COO_weights_columnar[[4]])#
#
probs = rep(0, nrow(clado_table))#
for (i in 1:length(probs))#
	probs[i] = clado_table[i,4] / Rsp_rowsums[clado_table[i,1]]#
end#
clado_table = cbind(clado_table, probs)#
clado_table_df = adf2(clado_table)#
names(clado_table_df) = c("i", "j", "k", "wt", "prob")#
clado_table_df
clado_table = cbind(tmpres$COO_weights_columnar[[1]]+1+include_null_range, tmpres$COO_weights_columnar[[2]]+1+include_null_range, tmpres$COO_weights_columnar[[3]]+1+include_null_range, tmpres$COO_weights_columnar[[4]])#
#
probs = rep(0, nrow(clado_table))#
for (i in 1:length(probs))#
	probs[i] = clado_table[i,4] / Rsp_rowsums[clado_table[i,1]]#
end#
clado_table = cbind(clado_table, probs)#
clado_table_df = adf2(clado_table)#
names(clado_table_df) = c("i", "j", "k", "wt", "prob")#
clado_table_df
tree_string = "(((chimp:1,human:1):1,gorilla:2):1,orang:3);"#
tr = read.tree(file="", text=tree_string)#
trtable = prt(tr, printflag=FALSE)#
#
numstates = 4#
tmpres = get_Qmat_COOmat_from_res(resDEC, numstates=numstates, include_null_range=TRUE, max_range_size=NULL, timeperiod_i=1)#
#
probs_ancstate = rep(0.25, numstates)#
COO_weights_columnar = tmpres$COO_weights_columnar#
include_null_range = TRUE#
left_branch_downpass_likes = rep(1, numstates)#
right_branch_downpass_likes = rep(1, numstates)#
Rsp_rowsums = tmpres$Rsp_rowsums#
clado_table = cbind(tmpres$COO_weights_columnar[[1]]+1+include_null_range, tmpres$COO_weights_columnar[[2]]+1+include_null_range, tmpres$COO_weights_columnar[[3]]+1+include_null_range, tmpres$COO_weights_columnar[[4]])#
#
probs = rep(0, nrow(clado_table))#
for (i in 1:length(probs))#
	probs[i] = clado_table[i,4] / Rsp_rowsums[clado_table[i,1]]#
end#
clado_table = cbind(clado_table, probs)#
clado_table_df = adf2(clado_table)#
names(clado_table_df) = c("i", "j", "k", "wt", "prob")#
clado_table_df
tree_string = "(((chimp:1,human:1):1,gorilla:2):1,orang:3);"#
tr = read.tree(file="", text=tree_string)#
trtable = prt(tr, printflag=FALSE)#
#
numstates = 4#
tmpres = get_Qmat_COOmat_from_res(resDEC, numstates=numstates, include_null_range=TRUE, max_range_size=NULL, timeperiod_i=1)#
#
probs_ancstate = rep(0.25, numstates)#
COO_weights_columnar = tmpres$COO_weights_columnar#
include_null_range = TRUE#
left_branch_downpass_likes = rep(1, numstates)#
right_branch_downpass_likes = rep(1, numstates)#
Rsp_rowsums = tmpres$Rsp_rowsums#
clado_table = cbind(tmpres$COO_weights_columnar[[1]]+1+include_null_range, tmpres$COO_weights_columnar[[2]]+1+include_null_range, tmpres$COO_weights_columnar[[3]]+1+include_null_range, tmpres$COO_weights_columnar[[4]])#
#
probs = rep(0, nrow(clado_table))#
for (i in 1:length(probs))#
	probs[i] = clado_table[i,4] / Rsp_rowsums[clado_table[i-include_null_range,1]]#
end#
clado_table = cbind(clado_table, probs)#
clado_table_df = adf2(clado_table)#
names(clado_table_df) = c("i", "j", "k", "wt", "prob")#
clado_table_df
tmpres$COO_weights_columnar
Rsp_rowsums
tree_string = "(((chimp:1,human:1):1,gorilla:2):1,orang:3);"#
tr = read.tree(file="", text=tree_string)#
trtable = prt(tr, printflag=FALSE)#
#
numstates = 4#
tmpres = get_Qmat_COOmat_from_res(resDEC, numstates=numstates, include_null_range=TRUE, max_range_size=NULL, timeperiod_i=1)#
#
probs_ancstate = rep(0.25, numstates)#
COO_weights_columnar = tmpres$COO_weights_columnar#
include_null_range = TRUE#
left_branch_downpass_likes = rep(1, numstates)#
right_branch_downpass_likes = rep(1, numstates)#
Rsp_rowsums = tmpres$Rsp_rowsums#
clado_table = cbind(tmpres$COO_weights_columnar[[1]]+1+include_null_range, tmpres$COO_weights_columnar[[2]]+1+include_null_range, tmpres$COO_weights_columnar[[3]]+1+include_null_range, tmpres$COO_weights_columnar[[4]])#
#
probs = rep(0, nrow(clado_table))#
for (i in 1:length(probs))#
	probs[i] = clado_table[i,4] / Rsp_rowsums[clado_table[i,1]-include_null_range]#
end#
clado_table = cbind(clado_table, probs)#
clado_table_df = adf2(clado_table)#
names(clado_table_df) = c("i", "j", "k", "wt", "prob")#
clado_table_df
